import * as functions from 'firebase-functions'
import * as admin from 'firebase-admin';
admin.initializeApp(functions.config().firebase);
const fireStore = admin.firestore();

exports.joinGroup = functions.region('asia-northeast1').https.onRequest((request, response) => {
  let res;

  const idToken = request.body.idToken;
  const joinCode = request.body.joinCode;

 admin.auth().verifyIdToken(idToken)
   .then(function(decodedToken) {
    const joinRef = fireStore.collection('join').doc(joinCode)
    joinRef.get()
    .then(doc => {
      const myData = doc.data();
      if (!doc.exists) {
        response.send('No such document!')
      } else if(myData !== null) {
        let ageTurn;
        switch (doc.get('age')) {
          case 'usagi':
            ageTurn = 7;
            break;
          case 'sika':
            ageTurn = 8;
            break;
          case 'kuma':
            ageTurn = 9;
            break;
        }
        const group = doc.get('group');
        const family = doc.get('family');
        const first = doc.get('first');
        const call = doc.get('call');
        const age = doc.get('age');
        const age_turn = ageTurn;
        const position = doc.get('position');
        const team = doc.get('team');
        const uid =　decodedToken.uid;
        if(team != null){
          admin.auth().setCustomUserClaims(uid, {
            name: family + first,
            group: group,
            family: family,
            first: first,
            call: call,
            age: age,
            age_turn: age_turn,
            position: position,
            team: team,
          }).then(function() {
            const citiesRef = fireStore.collection('user');
            citiesRef.doc().set({
              name: family + first,
              group: group,
              family: family,
              first: first,
              call: call,
              age: age,
              age_turn: age_turn,
              position: position,
              team: team,
              uid: uid
            }).then(function(){
              const deleteRef = fireStore.collection('join').doc(joinCode)
              deleteRef.delete()
              .then(function() {
                res = 'success';
                response.send(res);
              }).catch();
            }).catch();
            // Tell client to refresh token on user.
          }).catch(function(error) {
            res = 'error';    
            response.send(res);    // Handle error
          });
        } else {
          admin.auth().setCustomUserClaims(uid, {
            name: family + first,
            group: group,
            family: family,
            first: first,
            call: call,
            age: age,
            position: position
          }).then(function() {
            const citiesRef = fireStore.collection('user');
            citiesRef.doc().set({
              name: family + first,
              group: group,
              family: family,
              first: first,
              call: call,
              age: age,
              position: position,
              uid: uid
            }).then(function(){
              const deleteRef = fireStore.collection('join').doc(joinCode)
              deleteRef.delete()
              .then(function() {
                res = 'success';
                response.send(res);
              }).catch();
            }).catch();
            // Tell client to refresh token on user.
          }).catch(function(error) {
            res = 'error';    
            response.send(res);    // Handle error
          });
        }
      }
      })
      .catch(err => {
        res = 'not found';
        response.send(res);
      })
    }).catch(function(error) {
            // Handle error
        res = 'not found';
        response.send(res);
    });
})

exports.createGroup = functions.region('asia-northeast1').https.onRequest((request, response) => {
    let res;
    const idToken = request.body.idToken;
    const groupName = request.body.groupName;
    admin.auth().verifyIdToken(idToken)
        .then(function (decodedToken) {
        const createRef = fireStore.collection('group').doc();
        createRef.set({
            name: groupName
        }).then(doc => {
            createRef.id;
            if (doc === null) {
                response.send('No such document!');
            } else if (doc !== null) {
                const group = createRef.id;
                const uid = decodedToken.uid;
                const first = request.body.first;
                const family = request.body.family;
                const call = 'さん';
                const age = 'leader';
                const position = 'leader';
                admin.auth().setCustomUserClaims(uid, {
                  name: family + first,
                  group: group,
                  family: family,
                  first: first,
                  call: call,
                  age: age,
                  position: position,
                  admin: true
                }).then(function() {
                  const citiesRef = fireStore.collection('user');
                  citiesRef.doc().set({
                    name: family + first,
                    group: group,
                    family: family,
                    first: first,
                    call: call,
                    age: age,
                    position: position,
                    uid: uid,
                    admin: true
                  }).then(function(){
                    res = 'success';
                    response.send(res);}
                  ).catch();
                  // Tell client to refresh token on user.
                }).catch(function(error) {
                  res = 'error';    
                  response.send(res);    // Handle error
                });
            }
        })
            .catch(err => {
            res = 'not found';
            response.send(res);
        });
    }).catch(function (error) {
        // Handle error
        res = 'not found';
        response.send(res);
    });
});

exports.changeUserInfo_group = functions.region('asia-northeast1').https.onRequest((request, response) => {
    let res;
    const idToken = request.body.idToken;
    const uid = request.body.uid;
    const family = request.body.family;
    const first = request.body.first;
    const team = request.body.team;
    const age = request.body.age;
    const age_turn = request.body.age_turn;
    const call = request.body.call;
    admin.auth().verifyIdToken(idToken)
        .then(function (decodedToken) {
        const userRef = fireStore.collection('user').where('group', '==', decodedToken.group).where('uid', '==', uid);
        userRef.get().then(doc => {
            if (doc === null) {
                response.send('No such document!');
            } else if (doc !== null) {
                  const setUserRef = fireStore.collection('user').doc(doc.docs[0].id);
                  setUserRef.update({
                    name: family + first,
                    family: family,
                    first: first,
                    call: call,
                    team: team,
                    age: age,
                    age_turn: age_turn
                  }).then(function(){
                    admin.auth().setCustomUserClaims(uid, {
                      name: family + first,
                      family: family,
                      first: first,
                      call: call,
                      team: team,
                      age: age,
                      age_turn: age_turn,
                      position: 'scout',
                      group: decodedToken.group
                    }).then(function() {
                      res = 'success';
                      response.send(res);
                    }).catch(function(){
                      res = 'error';
                      response.send(res);
                    })}
                  ).catch();
            }
        })
            .catch(err => {
            res = 'error';
            response.send(res);
        });
    }).catch(function (error) {
        // Handle error
        res = 'error';
        response.send(res);
    });
});

exports.inviteGroup = functions.region('asia-northeast1').https.onRequest((request, response) => {
    let res;
    const idToken = request.body.idToken;
    const first = request.body.first;
    const family = request.body.family;
    const call = request.body.call;
    const age = request.body.age;
    const position = request.body.position;
    const address = request.body.address;
    const team = request.body.team;
    if(team != null){
      admin.auth().verifyIdToken(idToken)
          .then(function (decodedToken) {
          const group = decodedToken.group;
          const createRef = fireStore.collection('join').doc();
          createRef.set({
              age: age,
              call: call,
              family: family,
              first: first,
              group: group,
              position: position,
              team: team
          }).then(doc => {
              createRef.id;
              if (doc === null) {
                  response.send('No such document!');
              } else if (doc !== null) {
                  const inviteCode = createRef.id;
                  const citiesRef = fireStore.collection('mail');
                  const text = family + first + '様\n\nあなたはcubookのグループへ招待されました\nグループへの参加に必要な登録コードはこちらです\n\n' + inviteCode + '\n\nこのコードはアカウント作成後に入力します\n詳しくはcubookのホームページをご確認ください\nhttps://sites.google.com/view/cubookinfo/%E4%BD%BF%E3%81%84%E6%96%B9/%E6%8B%9B%E5%BE%85%E3%82%92%E5%8F%97%E3%81%91%E3%81%9F%E6%96%B9\n\nAppStore\nhttps://apps.apple.com/us/app/cubook/id1507520804?l=ja&ls=1\n\nGooglePlay\nhttps://play.google.com/store/apps/details?id=app.kotakota.cubook&hl=ja\n\ncubook';
                  citiesRef.doc().set({
                    to: address,
                    message: {
                      subject: 'cubook登録コード',
                      text: text
                    }
                  }).then(function () {
                      res = 'success';
                      response.send(res);
                  }).catch();
              }
          })
              .catch(err => {
              res = 'not found';
              response.send(res);
          });
      }).catch(function (error) {
          // Handle error
          res = 'not found';
          response.send(res);
      });
    } else {
      admin.auth().verifyIdToken(idToken)
          .then(function (decodedToken) {
          const group = decodedToken.group;
          const createRef = fireStore.collection('join').doc();
          createRef.set({
              age: age,
              call: call,
              family: family,
              first: first,
              group: group,
              position: position
          }).then(doc => {
              createRef.id;
              if (doc === null) {
                  response.send('No such document!');
              } else if (doc !== null) {
                  const inviteCode = createRef.id;
                  const citiesRef = fireStore.collection('mail');
                  const text = family + first + '様\n\nあなたはcubookのグループへ招待されました\nグループへの参加に必要な登録コードはこちらです\n\n' + inviteCode + '\n\nこのコードはアカウント作成後に入力します\n詳しくはcubookのホームページをご確認ください\nhttps://sites.google.com/view/cubookinfo/%E4%BD%BF%E3%81%84%E6%96%B9/%E6%8B%9B%E5%BE%85%E3%82%92%E5%8F%97%E3%81%91%E3%81%9F%E6%96%B9\n\nAppStore\nhttps://apps.apple.com/us/app/cubook/id1507520804?l=ja&ls=1\n\nGooglePlay\nhttps://play.google.com/store/apps/details?id=app.kotakota.cubook&hl=ja\n\ncubook';
                  citiesRef.doc().set({
                    to: address,
                    message: {
                      subject: 'cubook登録コード',
                      text: text
                    }
                  }).then(function () {
                      res = 'success';
                      response.send(res);
                  }).catch();
              }
          })
              .catch(err => {
              res = 'not found';
              response.send(res);
          });
      }).catch(function (error) {
          // Handle error
          res = 'not found';
          response.send(res);
      });
  }
});

exports.checkcititation = functions.region('asia-northeast1').https.onRequest((request, response) => {
  const serchRef = fireStore.collection('challenge');
  serchRef.get()
  .then(doc => {
    const documents = doc.docs;
    for(let i=0; i<documents.length; i++){
      const snapshot = documents[i];
      if(snapshot.get('isCitationed') == null){
        const updateRef = fireStore.collection('challenge').doc(snapshot.id);
        updateRef.update({isCitationed: false}).then().catch();
      }
    }
    response.send('success');
  }).catch();
  return 0;
})

exports.sign = functions.region('asia-northeast1').firestore.document('toSign/{toSign}').onCreate((data, context) => {
  const toSignRef = fireStore.collection('toSign').doc(data.id);
  toSignRef.update({
    phase: 'processing'
  }).then().catch();
  const uid = data.get('uid');
  const type = data.get('type');
  const page = data.get('page');
  const number = data.get('number');
  const group = data.get('group');
  const feedback = data.get('feedback');
  const family = data.get('family');
  const time = data.get('time');
  const uid_leader = data.get('uid_leader');
  const signType = data.get('signType');
  const signID = data.get('signID');
  const documentId = toSignRef.id;
  const searchUidRef = fireStore.collection(type).where('uid', '==', uid).where('page', '==', page);
  searchUidRef.get()
    .then(doc => {
      if(doc.docs.length !== 0){
        const snapshot = doc.docs[0];
        const dataSigned = snapshot.get('signed');
        const dataSigned_get = dataSigned[number.toString()];
        if(dataSigned_get === null){
          const signInfo2 = {
            family: family,
            feedback: feedback,
            phase: 'signed',
            phaze: 'signed',
            time: time,
            uid: uid_leader,
            signType: signType,
            signID: signID,
          }
          dataSigned[number.toString()] = signInfo2;
          const getItemRef = fireStore.collection(type).doc(snapshot.id);
          getItemRef.update({signed: dataSigned})
            .then((__) => {
              const searchUserRef = fireStore.collection('user').where('uid', '==', uid);
              searchUserRef.get()
                .then(userDoc => {
                  const userSnapshot = userDoc.docs[0];
                  let signCount : any;
                  let count:number;
                  console.log(userSnapshot.get(type));
                  if(userSnapshot.get(type)!==null){
                    signCount = userSnapshot.get(type);
                    if(signCount[page.toString()] !== null){
                      count = signCount[page.toString()]+1;
                    } else {
                      count = 1;
                    }
                  } else {
                    count = 1;
                  }
                  signCount[page.toString()] = count;
                  const updateUserData = fireStore.collection('user').doc(userSnapshot.id);
                  updateUserData.update({[type]: signCount})
                  .then((_) => {
                    let isEnd:Boolean = false;
                    const challenge_hasItem : Array<number> = [
                        4,6,4,4,4,3,5,3,4,2,4,6,3,4,3,4,3,3,4,5,5,4,3,6,1,4,5,4,6,3,2,4,4,4,4,4,5,5,6,4,
                    ];
                    if(type !== 'challenge' && page !== 0){
                      isEnd = true;
                    } else if(type !== 'challenge' && page === 0 && count === 2){
                      isEnd = true;
                    } else if(type === 'challenge' && challenge_hasItem[page] === count) {
                      isEnd = true;
                    }
                    if(isEnd){
                      const challenge_number : Array<string> = [
                          '1-1','1-2','1-3','1-4','1-5','1-6','1-7','1-8','2-1','2-2','2-3','2-4','2-5','2-6','2-7','3-1','3-2','3-3','3-4','3-5','3-6','3-7','3-8','3-9','3-10','4-1','4-2','4-3','4-4','4-5','5-1','5-2','5-3','5-4','5-5','5-6','5-7','5-8','5-9','5-10'
                      ];
                      const usagi_title : Array<string> = [
                          '笑顔','運動','安全','清潔','計測','なわ結び','工作','表現','観察','野外活動','役に立つ','日本の国旗','世界の国々'
                      ];
                      const sika_title : Array<string> = [
                          '感謝','運動','事故の予防','健康','計測','なわ結び','工作','表現','観察','野外活動','暮らしのマナー','役に立つ','日本の国旗','世界の国々'
                      ];
                      const kuma_title : Array<string> = [
                          '心がけ','成長','事故への対応','救急','計測','なわ結び','工作','表現','観察','野外活動','暮らしのマナー','役に立つ','日本の国旗','世界の国々'
                      ];
                      const challenge_title : Array<string> = [
                          '国際','市民','友情','動物愛護','案内','自然保護','手伝い','災害救助員','天文学者','自然観察館','ハイカー','キャンパー','地質学者','気象学者','探検家','写真博士','コンピュータ博士','自転車博士','工作博士','通信博士','修理博士','乗り物博士','技術博士','救急博士','特技博士','水泳博士','運動選手','チームスポーツ博士','スキー選手','アイススケート選手','収集家','画家','音楽家','料理家','フィッシャーマン','旅行家','園芸家','演劇家','読書家','マジシャン'
                      ];
                      let bookName!:string;
                      let itemName!:string;
                      if(type === 'usagi'){
                        bookName = 'うさぎのカブブック';
                        itemName = usagi_title[page];
                      } else if(type === 'sika'){
                        bookName = 'しかのカブブック';
                        itemName = sika_title[page];
                      } else if(type === 'kuma'){
                        bookName = 'くまのカブブック';
                        itemName = kuma_title[page];
                      } else if(type === 'challenge'){
                        bookName = 'チャレンジ章';
                        itemName = challenge_title[page];
                      }
                      let effortBody:string;
                      if(type !== 'challenge'){
                        effortBody = bookName + ' ' + challenge_number + ' ' + itemName + 'を完修！';
                      } else {
                        effortBody = bookName + ' ' + page.toString() + ' ' + itemName + 'を完修！';
                      }
                      fireStore.collection('effort').add({
                        body: effortBody,
                        call: userSnapshot.get('call'),
                        congrats: 0,
                        family: userSnapshot.get('family'),
                        first: userSnapshot.get('first'),
                        group: group,
                        time: time,
                        type: type,
                        uid: uid
                      }).then().catch();
                      fireStore.collection('toSign').doc(documentId).update({'phase': 'processed'}).then().catch();
                    }
                  }).then().catch();
                }).then().catch();
            }).then().catch();
        }
      } else{
        console.log('nainikita');
        const signInfo = {
          family: family,
          feedback: feedback,
          phase: 'signed',
          phaze: 'signed',
          time: time,
          uid: uid_leader,
          signType: signType,
          signID: signID,
        }
        const dataSigned = [{[number.toString()]:signInfo}];
        const basicInfo = {
          group: group,
          page: page,
          start: time,
          uid: uid,
          signed: dataSigned
        }
        console.log(basicInfo);
        const getItemRef = fireStore.collection(type).doc();
        getItemRef.set({basicInfo})
          .then((__) => {
            const searchUserRef = fireStore.collection('user').where('uid', '==', uid);
            searchUserRef.get()
              .then(userDoc => {
                const userSnapshot = userDoc.docs[0];
                let signCount : any;
                let count:number;
                console.log(userSnapshot.get(type));
                if(userSnapshot.get(type)!==null){
                  signCount = userSnapshot.get(type);
                  if(signCount[page.toString()] !== null){
                    count = signCount[page.toString()]+1;
                  } else {
                    count = 1;
                  }
                } else {
                  count = 1;
                }
                signCount[page.toString()] = count;
                const updateUserData = fireStore.collection('user').doc(userSnapshot.id);
                updateUserData.update({[type]: signCount})
                .then((_) => {
                  let isEnd:Boolean = false;
                  const challenge_hasItem : Array<number> = [
                      4,6,4,4,4,3,5,3,4,2,4,6,3,4,3,4,3,3,4,5,5,4,3,6,1,4,5,4,6,3,2,4,4,4,4,4,5,5,6,4,
                  ];
                  if(type !== 'challenge' && page !== 0){
                    isEnd = true;
                  } else if(type !== 'challenge' && page === 0 && count === 2){
                    isEnd = true;
                  } else if(type === 'challenge' && challenge_hasItem[page] === count) {
                    isEnd = true;
                  }
                  if(isEnd){
                    const challenge_number : Array<string> = [
                        '1-1','1-2','1-3','1-4','1-5','1-6','1-7','1-8','2-1','2-2','2-3','2-4','2-5','2-6','2-7','3-1','3-2','3-3','3-4','3-5','3-6','3-7','3-8','3-9','3-10','4-1','4-2','4-3','4-4','4-5','5-1','5-2','5-3','5-4','5-5','5-6','5-7','5-8','5-9','5-10'
                    ];
                    const usagi_title : Array<string> = [
                        '笑顔','運動','安全','清潔','計測','なわ結び','工作','表現','観察','野外活動','役に立つ','日本の国旗','世界の国々'
                    ];
                    const sika_title : Array<string> = [
                        '感謝','運動','事故の予防','健康','計測','なわ結び','工作','表現','観察','野外活動','暮らしのマナー','役に立つ','日本の国旗','世界の国々'
                    ];
                    const kuma_title : Array<string> = [
                        '心がけ','成長','事故への対応','救急','計測','なわ結び','工作','表現','観察','野外活動','暮らしのマナー','役に立つ','日本の国旗','世界の国々'
                    ];
                    const challenge_title : Array<string> = [
                        '国際','市民','友情','動物愛護','案内','自然保護','手伝い','災害救助員','天文学者','自然観察館','ハイカー','キャンパー','地質学者','気象学者','探検家','写真博士','コンピュータ博士','自転車博士','工作博士','通信博士','修理博士','乗り物博士','技術博士','救急博士','特技博士','水泳博士','運動選手','チームスポーツ博士','スキー選手','アイススケート選手','収集家','画家','音楽家','料理家','フィッシャーマン','旅行家','園芸家','演劇家','読書家','マジシャン'
                    ];
                    let bookName!:string;
                    let itemName!:string;
                    if(type === 'usagi'){
                      bookName = 'うさぎのカブブック';
                      itemName = usagi_title[page];
                    } else if(type === 'sika'){
                      bookName = 'しかのカブブック';
                      itemName = sika_title[page];
                    } else if(type === 'kuma'){
                      bookName = 'くまのカブブック';
                      itemName = kuma_title[page];
                    } else if(type === 'challenge'){
                      bookName = 'チャレンジ章';
                      itemName = challenge_title[page];
                    }
                    let effortBody:string;
                    if(type !== 'challenge'){
                      effortBody = bookName + ' ' + challenge_number + ' ' + itemName + 'を完修！';
                    } else {
                      effortBody = bookName + ' ' + page.toString() + ' ' + itemName + 'を完修！';
                    }
                    fireStore.collection('effort').add({
                      body: effortBody,
                      call: userSnapshot.get('call'),
                      congrats: 0,
                      family: userSnapshot.get('family'),
                      first: userSnapshot.get('first'),
                      group: group,
                      time: time,
                      type: type,
                      uid: uid
                    }).then().catch();
                    fireStore.collection('toSign').doc(documentId).update({'phase': 'processed'}).then().catch();
                  }
                }).then().catch();
              }).then().catch();
          }).then().catch();
      }
    }).then().catch();
  return 0;
});

exports.lumpCreate = functions.region('asia-northeast1').firestore.document('lump/{lump}').onCreate((data, context) => {
  const uid_toAdd = data.get('uid_toAdd');
  const group = data.get('group');
  const feedback = data.get('feedback');
  const family = data.get('family');
  const time = data.get('start');
  const uid_leader = data.get('uid');
  const listCategory = ['usagi', 'sika', 'kuma'];
  for(const uid of uid_toAdd){
    const searchUidRef = fireStore.collection('user').where('uid', '==', uid);
    searchUidRef.get()
    .then(doc => {
      const userData = doc.docs[0];
      for(const category of listCategory){
        if(userData.get('age') == category && data.get(category).length != 0){
          for(const data_toAdd of data.get(category)){
            const toSignRef = fireStore.collection('toSign');
            toSignRef.doc().set({
              uid: uid,
              group: group,
              page: data_toAdd['page'],
              number: data_toAdd['number'],
              feedback: feedback,
              family: family,
              time: time,
              uid_leader: uid_leader,
              type: category,
              signType: 'lump',
              signID: data.id,
              name: userData.get('name'),
              phase: 'wait'
            }).then().catch();
          }
        }
      }
      for(const data_toAdd of data.get('challenge')){
        const toSignRef = fireStore.collection('toSign');
        toSignRef.doc().set({
          uid: uid,
          group: group,
          page: data_toAdd['page'],
          number: data_toAdd['number'],
          feedback: feedback,
          family: family,
          time: time,
          uid_leader: uid_leader,
          type: 'challenge',
          signType: 'lump',
          signID: data.id,
          name: userData.get('name'),
          phase: 'wait'
        }).then().catch();
      }
    }).then().catch();
  }
  return 0;
});

exports.taskWaitTrigger = functions.region('asia-northeast1').firestore.document('task/{task}').onCreate((change, context) => {
  const taskRef = fireStore.collection('task').doc(change.id);
  taskRef.update({
    phase: 'wait'
  }).then().catch();
  
  return 0;
});